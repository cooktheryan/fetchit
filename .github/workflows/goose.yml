name: Goose Issue Resolver

on:
  issues:
    types: [labeled]

jobs:
  resolve-with-goose:
    # Only run when the "goose" label is added
    if: ${{ github.event.label.name == 'goose' }}
    runs-on: ubuntu-latest
    
    env:
      OLLAMA_HOST: ${{ secrets.OLLAMA_HOST }}
      ISSUE_NUMBER: ${{ github.event.issue.number }}
      REPO_OWNER: ${{ github.repository_owner }}
      REPO_NAME: ${{ github.event.repository.name }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install Goose CLI
        run: |
          mkdir -p /home/runner/.local/bin
          curl -fsSL https://github.com/block/goose/releases/download/stable/download_cli.sh \
            | CONFIGURE=false INSTALL_PATH=/home/runner/.local/bin bash
          echo "/home/runner/.local/bin" >> $GITHUB_PATH

      - name: Configure Goose with Ollama
        run: |
          # Create a config file for Goose
          mkdir -p ~/.config/goose
          
          cat > ~/.config/goose/config.yaml <<EOF
          extensions:
            computercontroller:
              bundled: true
              display_name: Computer Controller
              enabled: false
              name: computercontroller
              timeout: 300
              type: builtin
            developer:
              bundled: true
              display_name: Developer
              enabled: true
              name: developer
              timeout: 300
              type: builtin
            jetbrains:
              bundled: true
              display_name: Jetbrains
              enabled: false
              name: jetbrains
              timeout: 300
              type: builtin
            memory:
              bundled: true
              display_name: Memory
              enabled: false
              name: memory
              timeout: 300
              type: builtin
            tutorial:
              bundled: true
              display_name: Tutorial
              enabled: false
              name: tutorial
              timeout: 300
              type: builtin
          GOOSE_MODE: smart_approve
          GOOSE_MODEL: qwen3:8b
          GOOSE_PROVIDER: ollama
          OLLAMA_HOST: ${{ secrets.OLLAMA_HOST }}
          EOF
      
      - name: Get issue details
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            core.setOutput("title", issue.data.title);
            core.setOutput("body", issue.data.body);
            
            return issue.data;
      
      - name: Create branch for fix
        id: create-branch
        run: |
          BRANCH_NAME="goose/fix-issue-${{ env.ISSUE_NUMBER }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT
      
      - name: Run Goose to analyze and fix issue
        id: goose-fix
        run: |
          # Run Goose to analyze the codebase and generate fixes based on the issue
          ISSUE_TITLE="${{ steps.issue.outputs.title }}"
          ISSUE_BODY="${{ steps.issue.outputs.body }}"
          
          echo "Issue to resolve: $ISSUE_TITLE"
          echo "Running Goose to analyze and propose fixes..."
          
          # Run Goose with the task
          # Using the -t/--text option to provide the issue description directly
          goose run -t "Fix the following issue: $ISSUE_TITLE\n\n$ISSUE_BODY" --with-builtin developer
          
          # Check if any changes were made
          if [[ -z $(git status --porcelain) ]]; then
            echo "No changes made by Goose"
            exit 1
          else
            echo "Changes detected - preparing commit"
            git config --global user.name "Goose Bot"
            git config --global user.email "goose-bot@users.noreply.github.com"
            git add .
            git commit -m "Fix issue #${{ env.ISSUE_NUMBER }}: $ISSUE_TITLE"
            git push origin ${{ steps.create-branch.outputs.BRANCH_NAME }}
          fi
      
      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Goose] Fix for issue #${process.env.ISSUE_NUMBER}`,
              body: `This PR was automatically generated by Goose to address issue #${process.env.ISSUE_NUMBER}.\n\n### Original Issue\n${process.env.ISSUE_TITLE}\n\n### Changes Made\nGoose analyzed the codebase and made changes to resolve the issue. Please review the changes and modify if needed before merging.`,
              head: `${process.env.BRANCH_NAME}`,
              base: 'main'
            });
            
            // Add the goose label to the PR
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: result.data.number,
              labels: ['goose', 'automated-pr']
            });
            
            // Comment on the original issue
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.ISSUE_NUMBER,
              body: `I've created PR #${result.data.number} with a proposed fix for this issue using Goose. Please review the changes.`
            });
            
            return result.data.html_url;
      
      - name: PR Creation Result
        run: |
          echo "Pull Request created: ${{ steps.create-pr.outputs.result }}"
